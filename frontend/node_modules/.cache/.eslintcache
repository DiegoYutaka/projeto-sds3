[{"D:\\workspace\\ws-devsuperior\\projeto-sds3\\frontend\\src\\index.tsx":"1","D:\\workspace\\ws-devsuperior\\projeto-sds3\\frontend\\src\\App.tsx":"2","D:\\workspace\\ws-devsuperior\\projeto-sds3\\frontend\\src\\components\\NavBar\\index.tsx":"3","D:\\workspace\\ws-devsuperior\\projeto-sds3\\frontend\\src\\components\\Footer\\index.tsx":"4","D:\\workspace\\ws-devsuperior\\projeto-sds3\\frontend\\src\\components\\DataTable\\index.tsx":"5","D:\\workspace\\ws-devsuperior\\projeto-sds3\\frontend\\src\\components\\BarChart\\index.tsx":"6","D:\\workspace\\ws-devsuperior\\projeto-sds3\\frontend\\src\\components\\DonutChart\\index.tsx":"7","D:\\workspace\\ws-devsuperior\\projeto-sds3\\frontend\\src\\Routes.tsx":"8","D:\\workspace\\ws-devsuperior\\projeto-sds3\\frontend\\src\\pages\\Home\\index.tsx":"9","D:\\workspace\\ws-devsuperior\\projeto-sds3\\frontend\\src\\pages\\Dashboard\\index.tsx":"10","D:\\workspace\\ws-devsuperior\\projeto-sds3\\frontend\\src\\utils\\requests.ts":"11","D:\\workspace\\ws-devsuperior\\projeto-sds3\\frontend\\src\\utils\\format.ts":"12"},{"size":274,"mtime":1631209198876,"results":"13","hashOfConfig":"14"},{"size":103,"mtime":1631457839566,"results":"15","hashOfConfig":"14"},{"size":593,"mtime":1631462680008,"results":"16","hashOfConfig":"14"},{"size":672,"mtime":1631295930106,"results":"17","hashOfConfig":"14"},{"size":3478,"mtime":1631463017051,"results":"18","hashOfConfig":"14"},{"size":2065,"mtime":1631466360393,"results":"19","hashOfConfig":"14"},{"size":1109,"mtime":1631466603502,"results":"20","hashOfConfig":"14"},{"size":528,"mtime":1631460915577,"results":"21","hashOfConfig":"14"},{"size":899,"mtime":1631461359510,"results":"22","hashOfConfig":"14"},{"size":1178,"mtime":1631461218414,"results":"23","hashOfConfig":"14"},{"size":50,"mtime":1631462681197,"results":"24","hashOfConfig":"14"},{"size":172,"mtime":1631464539820,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"wj0oor",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"D:\\workspace\\ws-devsuperior\\projeto-sds3\\frontend\\src\\index.tsx",[],["52","53"],"D:\\workspace\\ws-devsuperior\\projeto-sds3\\frontend\\src\\App.tsx",[],"D:\\workspace\\ws-devsuperior\\projeto-sds3\\frontend\\src\\components\\NavBar\\index.tsx",[],"D:\\workspace\\ws-devsuperior\\projeto-sds3\\frontend\\src\\components\\Footer\\index.tsx",[],"D:\\workspace\\ws-devsuperior\\projeto-sds3\\frontend\\src\\components\\DataTable\\index.tsx",[],"D:\\workspace\\ws-devsuperior\\projeto-sds3\\frontend\\src\\components\\BarChart\\index.tsx",["54"],"import axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\nimport Chart from 'react-apexcharts';\r\nimport { SaleSuccess } from 'types/sale';\r\nimport { round } from 'utils/format';\r\nimport { BASE_URL } from 'utils/requests';\r\n\r\ntype SeriesData = {\r\n    name: String;\r\n    data: number[];\r\n}\r\n\r\ntype ChartData = {\r\n    labels: {\r\n        categories: String[];\r\n    };\r\n    series: SeriesData[];\r\n}\r\n\r\nconst BarChart = () => {\r\n\r\n    const [chartData, setCharData] = useState<ChartData>({\r\n        labels: {\r\n            categories: []\r\n        },\r\n        series: [\r\n            {\r\n                name: \"\",\r\n                data: []\r\n            }\r\n        ]\r\n    });\r\n\r\n    useEffect(() => {\r\n        axios.get(`${BASE_URL}/sales/success-by-seller`)\r\n            .then(response => {\r\n                const data = response.data as SaleSuccess[];\r\n                const myLabels = data.map(x => x.sellerName);\r\n                const mySeries = data.map(x => round(100.0 * x.deals / x.visited, 1));\r\n\r\n                setCharData({\r\n                    labels: {\r\n                        categories: myLabels \r\n                    },\r\n                    series: [\r\n                        {\r\n                            name: \"% Success\",\r\n                            data: mySeries\r\n                        }\r\n                    ]\r\n                });\r\n            });\r\n    } , []);\r\n\r\n    const options = {\r\n        plotOptions: {\r\n            bar: {\r\n                horizontal: true,\r\n            }\r\n        },\r\n    };\r\n\r\n    const mockData = {\r\n        labels: {\r\n            categories: ['Anakin', 'Barry Allen', 'Kal-El', 'Logan', 'Padm√©']\r\n        },\r\n        series: [\r\n            {\r\n                name: \"% Sucesso\",\r\n                data: [43.6, 67.1, 67.7, 45.6, 71.1]\r\n            }\r\n        ]\r\n    };\r\n\r\n    return (\r\n        <Chart \r\n            options={{ ...options, xaxis: chartData.labels}}\r\n            series={chartData.series}\r\n            type=\"bar\"\r\n            height=\"240\"\r\n        />\r\n    );\r\n}\r\n\r\nexport default BarChart;","D:\\workspace\\ws-devsuperior\\projeto-sds3\\frontend\\src\\components\\DonutChart\\index.tsx",[],"D:\\workspace\\ws-devsuperior\\projeto-sds3\\frontend\\src\\Routes.tsx",[],"D:\\workspace\\ws-devsuperior\\projeto-sds3\\frontend\\src\\pages\\Home\\index.tsx",[],"D:\\workspace\\ws-devsuperior\\projeto-sds3\\frontend\\src\\pages\\Dashboard\\index.tsx",[],"D:\\workspace\\ws-devsuperior\\projeto-sds3\\frontend\\src\\utils\\requests.ts",[],"D:\\workspace\\ws-devsuperior\\projeto-sds3\\frontend\\src\\utils\\format.ts",[],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":63,"column":11,"nodeType":"61","messageId":"62","endLine":63,"endColumn":19},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"@typescript-eslint/no-unused-vars","'mockData' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]